// ------------------------JUnit测试顺序----------------------------
√（0）删除数据库weixin →  新建数据库weixin
√（1）TestGroupingService.testBatchCreateGrouping()  
① 根据hibernate配置文件完成数据库表的全部搭建
② 初始化grouping中的数据（必要且优先）
√（2）TestProjectType.testBatchCreateProjectType()
初始化“项目类型”数据信息，这些信息将作为创建BesureProject（默认） → DoingProject（默认） → 各个层级对象的前提（必要且优先）
√（3）TestBesureProject、 TestDoingProject
√（4）TestXXXXLevelService
√（5）User 和 Member(新建用户必须伴随创建一个默认member)
√（6）Manager
√（7）House 和  Geo
（8）Activity、article、articlephoto



// ------------------------------系统需要初始化的内容--------------------------
（1）grouping表中的tag标签————initTag.properties  通过WeiXinAction.recall()在接受到与微信端的初次握手时在case "first":分支中通过调用WeixinService4Setting.InitPlatform() 实现
（2）projectType表中的项目类型数据————projectTypes.properties  通过方式，同上
（3）层级类型-权限类型-权限的初始化————permissionConfig/PermissionLevel_PermissionType_Permission.json 通过Admin权限登陆系统后，在权限页面下拉列表中批量创建。

（4）如果希望清空系统中的所有数据库数据，只需要放心大胆的通过HeidiSQL，依次将每个数据库表中的所有数据删除就可以了，然后再通过接入微信时通WeixinService4Setting.InitPlatform()完成grouping和projectType的创建，然后通过admin登陆系统后台完成权限系统的新建，整个系统就可用了。

// ---------------------------数据库操作注意事项---------------------------
（1）一对一表关系。 由于两个表的数据公用同一个主键，因此在实际通过Hibernate对持久化状态对象进行操作的时候一定要注意，在新建数据的时候，一对一的两个表新建的持久化状态对象，相互之间一定要都被引用，也就是A.B = B; B.A = A; 之后再级联地保存其中一个例如 Aservice.save(A); 或 Bservice.save(B); 就能建立关联了，否则会出现从表找不到主键的Hibernate异常。这是因为Hibernate在生成一对一关联数据的时候，从表的主键是通过主表对象的主键获取的，因此你必须向从表持久化状态对象的主表引用中引用主表对象，这样Hibernate才能通过该引用找到主表的持久化状态对象，然后得到主表的主键值。
（2）主表以List<Object> 容器来承装从表对象时，Hibernate为了能辨识出存入List容器中从表对象的先后顺序，会在所关联的从表中加入一个我通常会命名为“index4主表名”的字段用来存放从表新建的先后次序，这样当Hibernate级联地从从表中获取与主表管理的数据到List容器中的时候，就能通过这个次序在容器中排列好先后顺序。因此在实际新建从表数据的时候，应该获取到主表对象，然后从主表中获取到list容器然后调用list的add()方法将新建的从表对象放入到容器中，然后从表中的主表字段也要引用到主表对象，最后再级联地保存从表对象就能完成新建从表和确定从表次序的工作。否则，如果只是通过从表中的主表引用来引用主表，而不在主表的list容器中添加新建的从表对象，那么新建的从表对象的“index4主表名”的字段就会为null缺少排列序号。

// ---------------------------常见异常处理---------------------------
（1）如果你发现Spring的beanFactory在加载某个Bean的时候爆出找不到某某Bean的情况，那么就重启Eclipse，并且调出任务管理器将后台运行的所有Java程序关闭，然后重启Eclipse重启服务器。
（2）如果你发现某些jar缺失，这是由于Maven加载的问题，解决办法是在项目名称上单机右键，然后选择Maven→Update 从网络或本地仓库更新
（3）如果你发现一些配置文件并没有更新到Tomcat服务器上，则你需要先关闭tomcat服务器，然后到服务器根目录下的/webapp中将项目已部署的web应用程序目录删除，然后在项目名称上单击右键，然后Run as → Maven clean 清除项目中target目录中的旧文件；
然后再Run as → Maven build → 在操作意图中写上"compile" 重新编译工程中的所有配置文件、java源文件等到target，最后再次启动tomcat服务器，这样一来当重新部署工程到服务器上的时候就会将target中新编译的内容部署到服务器了。
（4）如果出现Maven的某些工具、插件没有安装成功导致异常，则需要Run as → Maven Install 重新向当前工程中安装Maven所需要插件。

（5）2018年8月5日，今天把已经完成的双Realm（myRealm用来验证扫码登陆/myRealm4Input用来验证用户名密码登陆）的系统接入到微信中后，新建菜单也已经生效。这个时候当我点击微信端登陆系统后台的时候出现了一个奇怪的问题
org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: cc.natapp4.ddaig.domain.Manager.zls, could not initialize proxy - no Session
这是一个Hibernate中非常经典的no session异常，我之前很奇怪不仅仅是因为已经在系统中部署了Spring提供的同意管理session的OpenSessionInView过滤器，还因为在测试版本中这个微信端直接登陆系统后台的功能是正常的。该异常发生的位置是在调用myRealm.doGetAuthorizationInfo()获取权限列表的时候出现的，我原本以为Shiro会一次性同时调用doGetAuthenticationInfo()和doGetAuthorizationInfo()两个方法，但经过我在网上查阅资料后才知道，登陆时会调用doGetAuthenticationInfo()完成认证，但不会继续调用doGetAuthorizationInfo()，而是等到JSP的shiro标签/applicationContext的shiro过滤器链条中规定某个url需要某种权限/shiro在类的方法上的权限注解并且该方法被调用，这三种情况发生的时候才会执行doGetAuthorizationInfo()这其实也是一种懒加载策略。
知道这一点后我明白了，no session异常发生的位置不会是doGetAuthentication()认证的阶段，而是在之后比如说认证完成后的请求重定向或请求转发的访问阶段出发了doGetAuthorizationInfo()进行授权的时候发生的，于是我查看了控制台打印的信息，发现在shiroAction_login.action自动登陆成功后会通过action中的名为wxUrl的属性进行动态结果集的请求重定向，二改wxUrl的打印地址是
“最终存入Session的完整wxURL：http://ddaig.nat200.top/weixin/?code=071LgoS22lA90Y0wF7Q22qudS22LgoSY&state=”  我们看到这个连接不是*.action格式，而我在web.xml定义OpenSessionInView过滤器的时候规定的过来规则是"*.action"，至此问题已经很明了了，我们wxURL所请求转发的路径没有出发openSessionInView，自然在doGetAuthorizationInfo中通过userService.queryEntityByOpenID() 得到user后session就关闭了，由于user.manager不是拦截在因此还是可以得到manager的（不需要通过session从数据库中请求），但是manager中的所有容器缺失在HBM中设定为了懒加载，当我们获取容器的时候由于session已经关闭，自然就会报出 no session的异常。
而测试版本之所以能正常，是因为测试版本的wxURL所请求的是directPageAction，而该action在新版本的系统中已经弃用了。
因此该问题的解决办法就是设置OpenSessionInView拦截器的规则为"/*"



// ---------------------------Shiro认证操作者身份---------------------------
		Subject subject = SecurityUtils.getSubject();
		String principal = (String) subject.getPrincipal();
		// 执行当前新建操作的管理者的User对象
		User doingMan = null;
		// 标记当前执行者是否是admin
		boolean isAdmin = false;
		if (28 == principal.length()) {
			// openID是恒定不变的28个字符，说明本次登陆是通过openID登陆的（微信端自动登陆/login.jsp登陆）
			doingMan = this.queryByOpenId(principal);
		} else {
			// 用户名登陆（通过signin.jsp页面的表单提交的登陆）
			// 先判断是不是使用admin+admin 的方式登录的测试管理员
			if ("admin".equals(principal)) {
				isAdmin = true;
			} else {
				// 非admin用户登录
				doingMan = this.getUserByUsername(principal);
			}
		}

// -------------------------定位当前操作者层级对象下的直属成员对应的member-----------------------------
String  levelTag  = (String) ServletActionContext.getRequest().getSession().getAttribute("tag");
String  lid  = (String) ServletActionContext.getRequest().getSession().getAttribute("lid");
for(Member m : members){
	switch(levelTag){
	case "minus_first":
		if(null!=m.getMinusFirstLevel() && m.getMinusFirstLevel().getMflid().equals(lid) && null==m.getZeroLevel()){
			member = m;
		}
		break;
	case "zero":
		if(null!=m.getZeroLevel() && m.getZeroLevel().getZid().equals(lid) && null==m.getFirstLevel()){
			member = m;
		}
		break;
	case "first":
		if(null!=m.getFirstLevel()&&m.getFirstLevel().getFlid().equals(lid) && null==m.getSecondLevel()){
			member = m;
		}
		break;
	case "second":
		if(null!=m.getSecondLevel()&&m.getSecondLevel().getScid().equals(lid) && null==m.getThirdLevel()){
			member = m;
		}
		break;
	case "third":
		if(null!=m.getThirdLevel() && m.getThirdLevel().getThid().equals(lid) && null==m.getFourthLevel()){
			member = m;
		}
		break;
	case "fourth":
		if(null!=m.getFourthLevel()&&m.getFourthLevel().getFoid().equals(lid)){
			member = m;
		}
		break;
	}
}		
		
		

// ---------------------------系统登陆的逻辑流程---------------------------
		
前端来访 → MyShiroFilter将所请求的URL进行分析，如果发现名为code的请求参数就放到session域中命名为wxURL，也就是判定本次来访时来自微信端的 → Shiro的Filter过滤器链条 → 如果当前所请求的路径需要authc则转交给shiroFilter这个bean中配置的loginUrl属性所标定的Action处理 → shiroAction_login.action
						如果session中存在wxURL，认定为微信端来访 → 执行认证操作 → 返回结果集索引字符串SUCCESS → 通过shiroAction.wxURL作为动态结果集访问原目标路径
					  /
→ShiroAction.login() → 											  							 扫码 → shiroAction.ws4Login();
					  \																	   /
						如果session中不存在wxURL，为桌面端来访→	跳转到/openJSP/sigin.jsp → 
																						   \
																							 传统 → shiroAction.login4Input();
				
		
		


// =========================================明日工作内容===========================================
明天的工作就是：

1、社区层面的宣发页面【不急】
（0）增加minusFirstLevel层级的展示页面，用于定期展示可视化数据和街道层级的活动
（1）首页页面为每个zeroLevel层级添加独立的展示页面，用于展示下属层级的→ 项目 → 每场活动的article
（2）在article上添加“推荐首页”按钮功能，可以将该article推送到社区首页页面展示

2、基于FullCalendar设计固定周例程【不急】，
用于一次性批量创建每周都执行的固定活动（固定活动可指定给具体层级，层级内人员无需报名可随到随签——签到入口为了便捷可设定在“微信菜单”的“便捷签到”）


3、用户中心页 → 用户点击自己的用户名时，会弹出一个dialog，“电子工作证”显示如下信息，并提供修改入口	
二维码
我的地址
我的ID
我的性别
用户名
联系电话


4、进一步改造Shiro认证，以应对可能的username重名现象的发生
（1）严格实名认证的字段书写，一定要将username和phone作为识别用户身份的唯一标识
（2）桌面端提供的“用户名/密码”登陆改进为——“用户名、电话/密码”登陆，防止重名者对登陆的干扰
（3）Shiro认证的token将采用将username和phone结合作为username的做法，例如：“吉磊*13718805500”作为用户名
（4）在用户中心 → 设置 → 修改密码功能，从而根除测试阶段固定的登陆密码为123（admin还是admin不变）的尴尬


5、基于freeMarker实现“电子工作证”的word导出功能


6、街道层级增加房屋管理功能，房屋管理功能；


7、如果权限不足，则在跳转到“权限不足”提示页面之前，执行退出登录操作，防止该浏览器在session有效期内无法登录的现象



8、【项目化管理方案】为DoingProject和BesureProject增加新的字段（minusFirstProject、zeroProject、firstProject、secondProject、thirdProject、fourthProject），
将“组织层级化”管理理念引入到“项目管理”中。新字段与已有的层级化字段的区别是:
/*
 * ★★★
 * 注意，不论是doingProject还是besureProject都与层级对象类似，
 * 为了能够快速便利出某个层级对象之下所有子层级对象所执行的项目
 * 也为了能够逐本溯源，找到项目的最初（通常是minusFirst或zeroLevel）
 * 下发的层级对象，因此其中的MInusFirstLevel、ZeroLevel、FirstLevel、
 * SecondLevel、ThirdLevel、FourthLevel都要从项目所属层级（当前就是ZeroLevel）
 * 一直向上追溯到最顶层级（MinusFirstLevel）这样才能方便表现出项目的层级化关系
 * 至少目前来说随层级创建的“默认项目”是这样的，
 *
 * 
 */
简单言之就是已有层级字段是用来指示该项目当前执行者是谁，以及属于哪个更高层级之下；
而新建字段是用来独立表示一个项目的层级关系，因为之后推行项目化运作方案，从minus（联合会或街道）可以向各个社区摊派积分，
就是要通过带积分的大项目包的形式分派给各个社区，然后各个社区再次拆包成小项目分派各自的子层级，然后再拆包。而且社区有自己的经费也可以创建自己的带积分项目向下进行分派。
所以所有拆出来的子项目都应该能追根溯源到其所属于的父项目包，然后每个项目包又能通过旧字段定位到当前执行项目的层级对象。


9、用户加入新层级除了扫码外，还要加入两种新方式：
（1）用户在首页中可以浏览各个社区的“首页”从中有一个板块是社区社会组织的目录，用过点击按钮“我要加入”→ 填写加入申请
（2）社区管理员的派遣功能，实现将社区层级的直辖人员派遣到下辖的任意层级中，实际上就是创建对应层级的member即可，一点儿也不复杂


10、简单的积分兑换功能，用于日常的积分反哺：在后台新建兑换奖品名录，生成专属二维码，志愿者通过扫描二维码实现积分换购功能。


11、如有时间需要对FullCalendar的第四版进行深入学习，使用新版本提高移动端创建室内活动时选择日历时的尴尬


12、基于sheetJS，实现导入xlsx文档，实现批量创建用户的功能，降低工作量
（1）实现微信用户在实名认证时，基于其填写的username（真实姓名）和phone（电话），在数据库中定位其是否已经在之前手动创建了，如果手动创建过则进行绑定

13、在后台增加设置项目——
（1） 对于加入申请是否手动审核的“开关”，默认“关闭”



// ==============================================WeUI设计"个人中心"=============================================
一、重要的参考资料：
（1）weui.css   	https://github.com/Tencent/weui/wiki
（2）weui.js		https://github.com/Tencent/weui.js/blob/master/docs/README.md
（3）WeUI的Demo		https://weui.io/
（4）WeUI.js的Demo	https://weui.io/weui.js/

二、WeUI组件的使用参考：
（1）ActionSheet
用来提供从低端弹起的功能菜单
（2）Cell和badge结合的消息列表
https://weui.io/#badge
（3）Cell，列表视图，用于将信息以列表的结构显示在页面上
https://github.com/Tencent/weui/wiki/Cell



// =================================数据库构建思路=================================

（1）用户申请加入组织层级以及组织管理者审核申请的数据库模型，一对一对多的三个表

userApply4JoinLevel   ← 一对一 →  approve4UserJoinLevel  ← 一对多 → reply4UserJoinLevelApprove

userApply4JoinLevel: （用户申请对象）
	ua4jlid （UUID主键）
	user  （外键，与用户进行一对多关联，由此可定位用户的基本信息）
	
	timeStr （形如： yyyy-MM-dd HH:mm:ss 的日期字符串，记录提交申请的日期）
	timeStamp （格里高利历偏移量毫秒值）
	
	theReason （前端表单字段：申请加入的原因）
	theExpertise （前端表单字段：你的专长）
	theDesire （前端表单字段：你的期许）
	
	status  （新建数据默认为0，代表“受理中”层级管理者“否决”申请，设置为1； 层级管理者“通过”申请，设置为2）
	beread （默认为NULL,只有当status为非0是，该标记位才会被关注，并且false表示组织层级管理者已经完成处理但是提交申请的用户还没看到，直到首次加载本数据的时候才会永久变更为true）
	
	
approve4UserJoinLevel: （层级审核申请对象）
	a4ujlid （foreign主键，与ua4jlid共用主键）
	tag （形如：minus_first/zero/first/second/third/fourth  这样的组织层级字段，用来联合lid一起定位用户提交申请的目标组织）
	lid （组织的主键id，与tag合作可以从数据库中定位用户所要申请加入的具体组织）
	beread （随同userApply4JoinLevel新建数据后，默认为false，用来表示新请求是否被层级管理者阅读过了，首次加载数据的时候会优秀修正为true）
	
	
reply4UserJoinLevelApprove：（审核答复对象）
	r4ujlaid （UUID主键）
	message （回复的内容）
	timeStr （形如： yyyy-MM-dd HH:mm:ss 的日期字符串）
	timeStamp （格里高利历偏移量毫秒值）
	beread （新建后默认就是false，只有当用户加载本条数据的时候才会永久修正为true，表示本数据是否已经被读取过）



// =========================================开发经验===========================================	
1、如果在服务器启动后，发现action的配置文件struts-XXX.xml中需要修改，则可以直接修改保存即可生效，无需重新启动服务器。
2、我们知道JSP的本质实际上就是servlet类，但是当服务器启动后，我们在JSP上的修改保存后也能立刻生效，无需重启服务器。
3、JavaScript脚本也是可以直接修改，然后直接生效，无需重启服务器。
4、目前经验来看，服务器已debugging模式开启后，对源代码（主要是java代码）的修改也是可以直接生效的，无需重启服务器。而如果没生效就需要重新deploying重启服务器了。


	


// ========================开始写项目书主要内容以线下活动为主体，包括：=========================
① 社区公益文化推广活动————目的就是做线下活动的企划，拉拢社区居民加入公众号
a.做产品————公众号文章质量
b.开发实体产品，扫描二维码关注公众号赠送图书、文化衫、便利袋等
Ⅰ社区图书文化节————关注公众号送图书活动
Ⅱ机核网社区核聚变活动（邀请机核网来到古色古香的四合院开展核聚变活动）赠送文化衫等
Ⅲ社区环保公益行活动————关注公众号，赠送便利袋等环保产品
c.青少年活动————桌游互动活动、科普活动等，利用寒暑假期到社区报到的机会要挟家长两个人都要关注公众号，因为所有活动的报名以及积分都是通过系统完成的，只有修够了社区的活动积分后，社区才会给同学们盖章。
d.老年人服务————义诊服务活动
e.对大众的社区嘉年华活动————公开宣传推广公众号二维码
f.楼门海报（一定要精彩时尚）
g.社区开展各种活动，书画评比、摄影评比等
h.党员和团员双报到为契机
i.组织辖区企业员工关注公众号，随时参与社区公益服务事业（可以与嘉年华活动结合起来）

② 社区社会组织的信息化能力建设（微信培训）
③ 社区志愿者的积分反哺（志愿者回馈日）
④ 公众号日常运维 （文章推送）
⑤ 平台系统的维护和新功能的开发
⑥ 组建社区青年群、老年群，随时了解社区居民的真实需求，保持青年的参与积极性和创造力
⑦ 张贴海报→ 加入公众号 → 公开招募有意思的社区活动创意 → 评选采用并获奖
⑧ 建立积分奖励机制 → 完成实名认证（10积分）→ 日常阅读文章（1积分）→ 来社区兑换奖品



回天社会创新学员：
（1）机构人员数量及组成
机构共有从业人员5人，其中3人全职，2人兼职。半数成员具有社工、心理、教育学专业背景或从业资质。机构设立有技术部、项目部和督导办公室，分别对应产品研发、项目设计执行和专业咨询督导工作。三个团队之间相互协作彼此支持，共同构成了承载运行的强有力内核。

（2）机构的愿景
承载的愿景是“做社工自己的互联网+”，我们致力于通过“互联网+社会工作”的立体化服务视角为社会治理创新贡献跨界组合的最优解方案。通过我们自身所具有信息化技术能力，结合专业的社会工作方法，可以为社区提供更具创新性和时代感的各类型服务，为社会动员、智慧养老、社区社会组织培育、志愿者支持、社区教育、青少年服务提供更加多元的选择，而我们的解决方案往往是最具持续性、拓展性和创造力的。

（3）机构业务
①早在16年核心团队组建之初我们就开始不断探索“互联网”技术与“社会工作”结合的可行性并为之付诸实践，经过一年多的自主研发，我们的核心产品“社区社会组织信息化管理平台2.0”终于初具雏形，它是一套轻量、扁平的信息化管理工具，可以提供包括社区社会组织信息化管理、人才资源信息化管理、志愿服务积分时长自动化管理、社会组织层级化建设、社会组织项目化管理等功能，可以协助街道和社区降低社团的管理成本、拓宽动员渠道、提升社区治理水平。
②得益于团队成员半数拥有心理学专业资质，我们设计了运用桌面游戏的方式改善青少年人际交往状态的服务项目，它结合了游戏治疗、团体沙盘、格式塔学派、认知行为和绘画心理学等技术的部分优点，通过游戏的方式模拟某些社交情境，让同学们在这些情境中练习自己的社交技能，包括但不限于语言表达、肢体表达、团队合作、领导力、利他主义、策略性、逻辑思维、抽象表达，在潜移默化中改善同学们的社会适应性不良、社会不满意度、社交回避和孤独感等几个维度的问题，最终实现青少年的自我突破和健康成长。 

（4）机构资源
① 互联网技术专业能力，我们具有根据地区和社区现实需求独立开展软件研发和平台建设的能力，以满足不同领域的信息化建设需要；
② 社会工作专业能力，团队半数人员拥有社会工作者从业资格并且成员平均均具有6年以上的社区工作经验，可以为社区基层提供扎实可靠的服务；
③ 心理学专业能力，团队半数成员拥有心理学背景，可以在社区基层开展心理健康服务；


（5）目前机构财务状况
机构去年刚刚成立，主要资金来源于政府购买项目以及社区、其他社会组织的服务委托但也相当有限。目前机构产品研发和落地实践为主要工作方向，需要充足的资金支持以保证产品的迭代更新，这是我们选择申请回天社会创新学员的主要原因之一。



==============回天服务清单====================
业务范围： “互联网+社会工作”、社区文化教育、社区社会组织培育、志愿者支持、为老服务、青少年团体心理工作、

服务内容：
【社区社会组织信息化建设】承载拥有完全自主的软件开发能力，基于“互联网+社会工作”的立体化服务理念和多元化设计思路，为地区及社区开发了一套社区社会组织信息化管理平台，平台依据“三管理，两建设，一共享”原则，可为地区提供社区社会组织层级化管理、人员信息化管理、活动项目化管理、活动场地线上预约、活动线上推送及报名、无纸化签到、积分服务时长自动化管理、志愿者积分反哺、信息安全保障等功能，配合承载专业的线下实体社会工作（志愿者支持、社区社会组织培育等）可为回天地区实现社区社会组织信息化建设提供专业技术支持。

【社区文化教育服务】承载核心团队于16年组建，早在那时便将“社区文化教育”定为机构的核心业务之一。目前承载已经为朝阳区、石景山区、东城区多个社区开展了包括“老年人手机大课堂”、“老年人计算机大课堂”、“老年人心理学大课堂”等社区教育服务，受到了老年学员的热烈欢迎，随堂制作的精细化复习讲义也得到了其子女们的认可。考虑到老年人的接受能力和记忆力，我们摒弃了传统灌输式的讲大课，采用多媒体互动式教学的方式，一步一步引导老年人“以练带学”学会新知识，用随堂动手的方式不断加深学员们的熟练程度，结合课后讲义的复习可确保老年学员能够学到知识。

【青少年服务】得益于承载的心理学及教育工作团队，我们为青少年准备了丰富的项目内容：
（1）荣获石景山区17年公益创投大赛银奖的“桌游为学”青少年团体心理工作。项目以桌面游戏为工作形式，通过开展主题分明的模拟现实社交情境的团体游戏，以团体动力学为内驱力，让青少年切身理解团队合作、领导力、表达能力、沟通能力、鉴赏力、逻辑、信任的能力对于人际交往的重要性，为了取得游戏胜利他们就需要在游戏中持续锻炼自己的上述能力，从而带领伙伴走向成功。随后他们会将游戏中学到的社交能力运用的日常生活中，改善青少年的社交状态。两年的项目执行经验所积累的前后测对比数据充分说明，项目就青少年在社会不满意度、孤独感、社交回避、抑郁情绪等方面具有明显的改善效果。同时活动形式丰富多样，既有个体游戏、团体游戏，也有隔代亲子互动游戏，满足不同需求情境。
（2）“天道酬勤，志向科学”青少年科普发展项目荣获了18年石景山区公益创投大赛的银奖，项目以青少年科普为主题，通过开展系列化的社区青少年科普活动，引导青少年了解科学爱上科学。目前项目已开展了航空航天科普、亲子趣味编程等系列课程，后续我们还会持续开发趣味物力、趣味化学、心理探秘、趣味数学等课程，将“天道酬勤，志向科学”打造成一个内涵丰富，门类细化的青少年科普品牌。
（3）青少年公益剧。承载新近探索执行的品牌项目，目的是让儿童通过公益剧参演的形式体会身边公益，着重培养青少年社会责任感和社会主义核心价值观。

【为老服务】承载核心团队组建之初就一直在朝阳区开展为老服务，曾为朝阳区四家街道级官办托老所提供机构养老服务，也为多个街道提供居家养老服务，因此有着相当丰富的为老服务工作经验。我们可提供老年人日常探访、精神慰藉、义诊服务、理发、兴趣小组、心理沙盘、健康（躯体及心理）档案信息化建设、居室除螨、防摔倒训练、趣味运动会、老电影放映、结对子帮扶、读书朗读会、日托所托管等服务。










